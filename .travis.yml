language: cpp
sudo: required
dist: trusty

matrix:
  include:

    # 1/ Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &clang39
        apt:
          sources: ['llvm-toolchain-precise-3.9', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.9', 'g++-6']
      env: COMPILER='clang++-3.9' COVERAGE=1

    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc6
        apt:
          sources: ['llvm-toolchain-precise-3.9', 'ubuntu-toolchain-r-test']
          packages: ['g++-6']
      env: COMPILER='g++-6' COVERAGE=1

#    # 3/ OSX Clang Builds - disabled for now
#    - os: osx
#      osx_image: xcode8
#      compiler: clang
#      env: COMPILER='clang++'

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60;
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 60;
      sudo update-alternatives --config gcc;
      sudo update-alternatives --config g++;
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      which cmake || brew install cmake || brew upgrade cmake
    fi
  - cmake --version
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  - export CXX=${COMPILER}
  # have CMake to generate build files
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build && cd build
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_CODE_COVERAGE=$COVERAGE

script:
  # build and run tests
  - cmake --build . -- -j${JOBS}
  - ctest --output-on-failure -j${JOBS}
  # Waiting for the following issue to be fixed before Mac OS X support can be enabled: https://github.com/RWTH-HPC/CMake-codecov/pull/15
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]] && [[ "${COVERAGE}" == "1" ]]; then
      cmake --build . --target gcov
      cmake --build . --target lcov
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
    fi
